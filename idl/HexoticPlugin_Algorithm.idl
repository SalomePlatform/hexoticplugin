// Copyright (C) 2007-2016  CEA/DEN, EDF R&D
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

// ---
// File   : HexoticPlugin_Algorithm.idl
// Author : Lioka RAZAFINDRAZAKA (CEA)
// ---
//
#ifndef _SMESH_HexoticALGORITHM_IDL_
#define _SMESH_HexoticALGORITHM_IDL_

#include "SMESH_Hypothesis.idl"
#include "SMESH_Mesh.idl"
#include "GEOM_Gen.idl"

/*!
 * HexoticPlugin: interfaces to Hexotic related hypotheses and algorithms
 */
module HexoticPlugin
{
  /*!
   * Type definitions for the size maps
   */
  struct HexoticPluginSizeMap {
  string entry;
  double size;
  };
  
  typedef sequence<HexoticPluginSizeMap> HexoticPluginSizeMapsList;  

  /*!
   * HexoticPlugin_Hexotic: interface of Hexotic algorithm
   */
  interface HexoticPlugin_Hexotic : SMESH::SMESH_3D_Algo
  {
  };

  /*!
   * HexoticPlugin_Hypothesis: interface of "Hexotic parameters" hypothesis
   */
  interface HexoticPlugin_Hypothesis : SMESH::SMESH_Hypothesis
  {
    void SetHexesMinLevel(in long value);
    long GetHexesMinLevel();

    void SetHexesMaxLevel(in long value);
    long GetHexesMaxLevel();
    
    void SetMinSize(in double value);
    double GetMinSize();

    void SetMaxSize(in double value);
    double GetMaxSize();

    void SetHexoticIgnoreRidges(in boolean value);
    boolean GetHexoticIgnoreRidges();

    void SetHexoticInvalidElements(in boolean value);
    boolean GetHexoticInvalidElements();
   
    void SetHexoticSharpAngleThreshold(in double value);
    double GetHexoticSharpAngleThreshold();
   
    void SetHexoticNbProc(in long value);
    long GetHexoticNbProc();

    void SetHexoticWorkingDirectory(in string path) raises (SALOME::SALOME_Exception);
    string GetHexoticWorkingDirectory();
   
    void SetHexoticSdMode(in long value);
    long GetHexoticSdMode();
   
    void SetHexoticVerbosity(in long value);
    long GetHexoticVerbosity();

    void SetHexoticMaxMemory(in long value);
    long GetHexoticMaxMemory();
    
    void SetAdvancedOption(in string option);
    string GetAdvancedOption();
    void SetTextOptions(in string option);// obsolete
    string GetTextOptions();

    void SetSizeMapEntry(in string entry, 
                         in double size);
    void UnsetSizeMapEntry(in string entry);

    void SetSizeMap(in GEOM::GEOM_Object GeomObj, 
                    in double size);
    void UnsetSizeMap(in GEOM::GEOM_Object GeomObj);

    HexoticPluginSizeMapsList GetSizeMaps();
    
    void SetNbLayers(in long theVal);
    long GetNbLayers();

    void SetFirstLayerSize(in double theVal);
    double GetFirstLayerSize();

    void SetDirection(in boolean theVal);
    boolean GetDirection();

    void SetGrowth(in double theVal);
    double GetGrowth();

    void SetFacesWithLayers(in SMESH::long_array theVal);
    SMESH::long_array GetFacesWithLayers();

    void SetImprintedFaces(in SMESH::long_array theVal);
    SMESH::long_array GetImprintedFaces();
  };
};

#endif
